#include "xparameters.h"
#include "stdio.h"
#include "xil_io.h"
#include "oled.h"
#include "xgpiops.h"
//#include"string.h"
//#include"stdlib.h"
//#define t 0x43C00000
//#define h 0x43C00004
//#include"hb.h"

#include "xparameters.h"
#include "xstatus.h"
#include "xuartlite.h"
#include "xil_printf.h"
#include "sleep.h"

#define TEST_BUFFER_SIZE 6
#define RECEIVE_BUFFER_SIZE 6
XUartLite UartLite;		/* Instance of the UartLite Device */
u8 SendBuffer[TEST_BUFFER_SIZE];	/* Buffer for Transmitting Data */
u8 RecvBuffer[RECEIVE_BUFFER_SIZE];	/* Buffer for Receiving Data */

//int UartLitePolledExample(u16 DeviceId);
int main(void){
	int p,q,i,suggest;
	char x[3];
	char y[3];
	char s[3];
	//char z[3];
	OLED_Init();
	OLED_Clear();
	p=Xil_In8(XPAR_MYIP_V1_0_0_BASEADDR);
	q=Xil_In8(XPAR_MYIP_V1_0_0_BASEADDR+4);

	//i = UartLitePolledExample(XPAR_AXI_UARTLITE_0_BASEADDR);
	suggest=58-q;
	x[0]='0'+p/10;
	x[1]='0'+p%10;
	x[2]='%';
	y[0]='0'+q/10;
	y[1]='0'+q%10;
	y[2]='¡æ';
	s[0]='0'+suggest/10;
	s[1]='0'+suggest%10;
	s[2]='¡æ';
	//z[0]=i/100;
	//z[1]=(i%10)/10;
	//z[2]=(i%10)%10;
	xil_printf("humidity:%d\t", p);
	xil_printf("temperature:%d\n", q);
	//xil_printf("temperature:%d\n", i);
	while(1){
		OLED_ShowString(0, 0, "humidity:");
		OLED_ShowString(96, 0, x);
		OLED_ShowString(0,2, "temperature:");
		OLED_ShowString(96, 2, y);
		//OLED_ShowString(0,4, "heartbeat:");
		//OLED_ShowString(96, 4, z);
		OLED_ShowString(0, 6, suggest+"¡æ");
		if(p<=40){OLED_ShowString(96, 6, "cold");}
		else{OLED_ShowString(96, 6, "dry");}
	}


	return 0;
}

/*int UartLitePolledExample(u16 DeviceId)
{
	int Status;
	unsigned int SentCount;
	int Index;
	Status = XUartLite_Initialize(&UartLite, DeviceId);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}
	Status = XUartLite_SelfTest(&UartLite);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	for (Index = 0; Index < TEST_BUFFER_SIZE; Index++) {
		RecvBuffer[Index] = 0;
	}
		SendBuffer[0]=0xFD;
		SendBuffer[1]=0x00;
		SendBuffer[2]=0x00;
		SendBuffer[3]=0x00;
		SendBuffer[4]=0x00;
		SendBuffer[5]=0x00;
		xil_printf("send complete");

		int i;
		while(1){
		SentCount = XUartLite_Send(&UartLite, SendBuffer, TEST_BUFFER_SIZE);
			usleep(50000);
			if (SentCount != TEST_BUFFER_SIZE) {
				return XST_FAILURE;
			}
		XUartLite_Recv(&UartLite, RecvBuffer,TEST_BUFFER_SIZE);
		usleep(50000);
		if(RecvBuffer[3]!=0xFF&&RecvBuffer[3]!=0x00)
		{
			xil_printf("%d\n",RecvBuffer[3]);
			break;
		}
	 }

	i=RecvBuffer[3];

	return i;
}
*/
