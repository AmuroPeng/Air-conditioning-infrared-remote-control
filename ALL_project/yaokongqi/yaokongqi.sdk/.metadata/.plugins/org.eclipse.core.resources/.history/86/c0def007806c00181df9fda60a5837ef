/*
 * heartbeats.c
 *
 *  Created on: 2018Äê6ÔÂ10ÈÕ
 *      Author: pleco
 */




/***************************** Include Files *********************************/

#include "xparameters.h"
#include "xstatus.h"
#include "xuartlite.h"
#include "xil_printf.h"
#include "sleep.h"

/************************** Constant Definitions *****************************/

/*
 * The following constants map to the XPAR parameters created in the
 * xparameters.h file. They are defined here such that a user can easily
 * change all the needed parameters in one place.
 */

/*
 * The following constant controls the length of the buffers to be sent
 * and received with the UartLite, this constant must be 16 bytes or less since
 * this is a single threaded non-interrupt driven example such that the
 * entire buffer will fit into the transmit and receive FIFOs of the UartLite.
 */
#define TEST_BUFFER_SIZE 6
#define RECEIVE_BUFFER_SIZE 6

/**************************** Type Definitions *******************************/


/***************** Macros (Inline Functions) Definitions *********************/


/************************** Function Prototypes ******************************/

int UartLitePolledExample(u16 DeviceId);

/************************** Variable Definitions *****************************/

XUartLite UartLite;		/* Instance of the UartLite Device */

/*
 * The following buffers are used in this example to send and receive data
 * with the UartLite.
 */
u8 SendBuffer[TEST_BUFFER_SIZE];	/* Buffer for Transmitting Data */
u8 RecvBuffer[RECEIVE_BUFFER_SIZE];	/* Buffer for Receiving Data */

/*****************************************************************************/
/**
*
* Main function to call the Uartlite polled example.
*
* @param	None.
*
* @return	XST_SUCCESS if successful, otherwise XST_FAILURE.
*
* @note		None.
*
******************************************************************************/


/****************************************************************************/
/**
* This function does a minimal test on the UartLite device and driver as a
* design example. The purpose of this function is to illustrate
* how to use the XUartLite component.
*
* This function sends data and expects to receive the data thru the UartLite
* such that a  physical loopback must be done with the transmit and receive
* signals of the UartLite.
*
* This function polls the UartLite and does not require the use of interrupts.
*
* @param	DeviceId is the Device ID of the UartLite and is the
*		XPAR_<uartlite_instance>_DEVICE_ID value from xparameters.h.
*
* @return	XST_SUCCESS if successful, XST_FAILURE if unsuccessful.
*
*
* @note
*
* This function calls the UartLite driver functions in a blocking mode such that
* if the transmit data does not loopback to the receive, this function may
* not return.
*
****************************************************************************/
int UartLitePolledExample(u16 DeviceId)
{
	int Status;
	unsigned int SentCount;

	int Index;

	/*
	 * Initialize the UartLite driver so that it is ready to use.
	 */
	Status = XUartLite_Initialize(&UartLite, DeviceId);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Perform a self-test to ensure that the hardware was built correctly.
	 */
	Status = XUartLite_SelfTest(&UartLite);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Initialize the send buffer bytes with a pattern to send and the
	 * the receive buffer bytes to zero.
	 */
	for (Index = 0; Index < TEST_BUFFER_SIZE; Index++) {
		RecvBuffer[Index] = 0;
	}
		SendBuffer[0]=0xFD;
		SendBuffer[1]=0x00;
		SendBuffer[2]=0x00;
		SendBuffer[3]=0x00;
		SendBuffer[4]=0x00;
		SendBuffer[5]=0x00;
		xil_printf("send complete");
	/*
	 * Send the buffer through the UartLite waiting til the data can be sent
	 * (block), if the specified number of bytes was not sent successfully,
	 * then an error occurred.
	 */
//	SentCount = XUartLite_Send(&UartLite, SendBuffer, TEST_BUFFER_SIZE);
//	usleep(50000);
//	if (SentCount != TEST_BUFFER_SIZE) {
//		return XST_FAILURE;
//	}

	/*
	 * Receive the number of bytes which is transfered.
	 * Data may be received in fifo with some delay hence we continuously
	 * check the receive fifo for valid data and update the receive buffer
	 * accordingly.
	 *
	 */

		while(1){
		SentCount = XUartLite_Send(&UartLite, SendBuffer, TEST_BUFFER_SIZE);
			usleep(50000);
			if (SentCount != TEST_BUFFER_SIZE) {
				return XST_FAILURE;
			}

		XUartLite_Recv(&UartLite, RecvBuffer,TEST_BUFFER_SIZE);
//		for(i=0;i<TEST_BUFFER_SIZE;i++)
//		{
//		xil_printf("%d\n",RecvBuffer[i]);
//	    }
		usleep(50000);
		if(RecvBuffer[3]!=0xFF&&RecvBuffer[3]!=0x00)
		{
			xil_printf("%d\n",RecvBuffer[3]);
			break;
		}
	 }
	/*
	 * Check the receive buffer data against the send buffer and verify the
	 * data was correctly received.
	 */
	//for (Index = 0; Index < TEST_BUFFER_SIZE; Index++) {
	//	if (RecvBuffer[3]==0xFF) {
	//		return XST_FAILURE;
	//	}
	//}

	return RecvBuffer[3];
}
