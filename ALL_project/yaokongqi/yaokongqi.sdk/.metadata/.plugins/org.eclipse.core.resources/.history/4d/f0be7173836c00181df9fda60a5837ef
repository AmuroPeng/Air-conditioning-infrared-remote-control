/*
 * hb.c
 *
 *  Created on: 2018Äê6ÔÂ10ÈÕ
 *      Author: pleco
 */

#include "xparameters.h"
#include "xstatus.h"
#include "xuartlite.h"
#include "xil_printf.h"
#include "sleep.h"
#define TEST_BUFFER_SIZE 6
#define RECEIVE_BUFFER_SIZE 6

int UartLitePolledExample(u16 DeviceId);

XUartLite UartLite;		/* Instance of the UartLite Device */

u8 SendBuffer[TEST_BUFFER_SIZE];	/* Buffer for Transmitting Data */
u8 RecvBuffer[RECEIVE_BUFFER_SIZE];	/* Buffer for Receiving Data */

int UartLitePolledExample(u16 DeviceId)
{
	int Status;
	unsigned int SentCount;
	unsigned int ReceivedCount = 0;
	int Index;

	Status = XUartLite_Initialize(&UartLite, DeviceId);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}
	Status = XUartLite_SelfTest(&UartLite);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	for (Index = 0; Index < TEST_BUFFER_SIZE; Index++) {
		RecvBuffer[Index] = 0;
	}
		SendBuffer[0]=0xFD;
		SendBuffer[1]=0x00;
		SendBuffer[2]=0x00;
		SendBuffer[3]=0x00;
		SendBuffer[4]=0x00;
		SendBuffer[5]=0x00;
		xil_printf("send complete");
//	SentCount = XUartLite_Send(&UartLite, SendBuffer, TEST_BUFFER_SIZE);
//	usleep(50000);
//	if (SentCount != TEST_BUFFER_SIZE) {
//		return XST_FAILURE;
//	}

		int i;
		while(1){
		SentCount = XUartLite_Send(&UartLite, SendBuffer, TEST_BUFFER_SIZE);
			usleep(50000);
			if (SentCount != TEST_BUFFER_SIZE) {
				return XST_FAILURE;
			}

		XUartLite_Recv(&UartLite, RecvBuffer,TEST_BUFFER_SIZE);
//		for(i=0;i<TEST_BUFFER_SIZE;i++)
//		{
//		xil_printf("%d\n",RecvBuffer[i]);
//	    }
		usleep(50000);
		if(RecvBuffer[3]!=0xFF&&RecvBuffer[3]!=0x00)
		{
			xil_printf("%d\n",RecvBuffer[3]);
			break;
		}
	 }

	i=RecvBuffer[3];

	return i;
}
